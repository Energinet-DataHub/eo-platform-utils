name: Lint and test

env:
  python-version: 3.8

on:
  pull_request: {}
  push:
    branches:
      - main

concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: false

jobs:
  build:
    name: build
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Set up Python ${{ env.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.python-version }}

      - name: Install pipenv
        run: |
          python -m pip install --upgrade pipenv wheel

      - id: cache-pipenv
        uses: actions/cache@v1
        with:
          path: ~/.local/share/virtualenvs
          key: ${{ runner.os }}-pipenv-${{ hashFiles('**/Pipfile.lock') }}

      - name: Install dependencies
        run: |
          pipenv install --deploy --dev

  lint:
    runs-on: ubuntu-latest
    needs: [build]

    steps:
    - uses: actions/checkout@v2

    - name: Set up Python ${{ env.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ env.python-version }}

    - name: Install pipenv
      run: |
        python -m pip install --upgrade pipenv wheel

    - id: cache-pipenv
      uses: actions/cache@v1
      with:
        path: ~/.local/share/virtualenvs
        key: ${{ runner.os }}-pipenv-${{ hashFiles('**/Pipfile.lock') }}

    - name: Analysing the code with flake8
      run: pipenv run lint-flake8

  unittest:
    name: Unittest
    runs-on: ubuntu-latest
    needs: [build]

    steps:
      - uses: actions/checkout@v2

      - name: Set up Python ${{ env.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.python-version }}

      - name: Install pipenv
        run: |
          python -m pip install --upgrade pipenv wheel

      - id: cache-pipenv
        uses: actions/cache@v1
        with:
          path: ~/.local/share/virtualenvs
          key: ${{ runner.os }}-pipenv-${{ hashFiles('**/Pipfile.lock') }}

      - name: Running unittests
        run: |
          pipenv run unittest

  integrationtest:
    name: Integrationtest
    runs-on: ubuntu-latest
    needs: [build]

    steps:
      - uses: actions/checkout@v2

      - name: Set up Python ${{ env.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.python-version }}

      - name: Install pipenv
        run: |
          python -m pip install --upgrade pipenv wheel

      - id: cache-pipenv
        uses: actions/cache@v1
        with:
          path: ~/.local/share/virtualenvs
          key: ${{ runner.os }}-pipenv-${{ hashFiles('**/Pipfile.lock') }}

      - name: Running integrationtest
        run: |
          pipenv run integrationtest

  # py_validate:
  #   name: Validate python
  #   uses: Energinet-DataHub/.github/.github/workflows/python-pipenv-validate.yaml@main
  #   with:
  #     python_version: 3.8
  #     ignore_lint_error: true

  publish:
    name: publish
    runs-on: ubuntu-latest
    needs: [build, lint, unittest, integrationtest]
    # needs: [py_validate]

    steps:
      - uses: actions/checkout@v2

      - name: Set up Python ${{ env.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.python-version }}

      - name: Install pipenv
        run: |
          python -m pip install --upgrade pipenv wheel

      - id: cache-pipenv
        uses: actions/cache@v1
        with:
          path: ~/.local/share/virtualenvs
          key: ${{ runner.os }}-pipenv-${{ hashFiles('**/Pipfile.lock') }}

      - name: Install dependencies
        run: |
          pipenv install --deploy --dev
          pip install pyyaml

      - name: Build prod tarball
        if: github.event_name == 'push' && github.ref_name == 'main'
        run: python setup.py sdist

      - name: Build dev tarball
        if: github.event_name == 'pull_request' && startsWith(github.event.pull_request.head.ref, 'feature/') && github.base_ref == 'main'
        run: python setup.py sdist --build=.dev${{ github.run_number }}


      - name: Publish distribution to PyPI
        uses: pypa/gh-action-pypi-publish@v1.4.2
        with:
          user: __token__
          password: ${{ secrets.PYPI_SECRET }}
          # TODO: For testing
          # repository_url: https://test.pypi.org/legacy/
